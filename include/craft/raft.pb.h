// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: craft/raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_craft_2fraft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_craft_2fraft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_craft_2fraft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_craft_2fraft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_craft_2fraft_2eproto;
namespace raftpb {
class ConfChange;
class ConfChangeDefaultTypeInternal;
extern ConfChangeDefaultTypeInternal _ConfChange_default_instance_;
class ConfChangeSingle;
class ConfChangeSingleDefaultTypeInternal;
extern ConfChangeSingleDefaultTypeInternal _ConfChangeSingle_default_instance_;
class ConfChangeV2;
class ConfChangeV2DefaultTypeInternal;
extern ConfChangeV2DefaultTypeInternal _ConfChangeV2_default_instance_;
class ConfState;
class ConfStateDefaultTypeInternal;
extern ConfStateDefaultTypeInternal _ConfState_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class HardState;
class HardStateDefaultTypeInternal;
extern HardStateDefaultTypeInternal _HardState_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class SnapshotMetadata;
class SnapshotMetadataDefaultTypeInternal;
extern SnapshotMetadataDefaultTypeInternal _SnapshotMetadata_default_instance_;
}  // namespace raftpb
PROTOBUF_NAMESPACE_OPEN
template<> ::raftpb::ConfChange* Arena::CreateMaybeMessage<::raftpb::ConfChange>(Arena*);
template<> ::raftpb::ConfChangeSingle* Arena::CreateMaybeMessage<::raftpb::ConfChangeSingle>(Arena*);
template<> ::raftpb::ConfChangeV2* Arena::CreateMaybeMessage<::raftpb::ConfChangeV2>(Arena*);
template<> ::raftpb::ConfState* Arena::CreateMaybeMessage<::raftpb::ConfState>(Arena*);
template<> ::raftpb::Entry* Arena::CreateMaybeMessage<::raftpb::Entry>(Arena*);
template<> ::raftpb::HardState* Arena::CreateMaybeMessage<::raftpb::HardState>(Arena*);
template<> ::raftpb::Message* Arena::CreateMaybeMessage<::raftpb::Message>(Arena*);
template<> ::raftpb::Snapshot* Arena::CreateMaybeMessage<::raftpb::Snapshot>(Arena*);
template<> ::raftpb::SnapshotMetadata* Arena::CreateMaybeMessage<::raftpb::SnapshotMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raftpb {

enum EntryType : int {
  EntryNormal = 0,
  EntryConfChange = 1,
  EntryConfChangeV2 = 2
};
bool EntryType_IsValid(int value);
constexpr EntryType EntryType_MIN = EntryNormal;
constexpr EntryType EntryType_MAX = EntryConfChangeV2;
constexpr int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor();
template<typename T>
inline const std::string& EntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntryType_descriptor(), enum_t_value);
}
inline bool EntryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
enum MessageType : int {
  MsgHup = 0,
  MsgBeat = 1,
  MsgProp = 2,
  MsgApp = 3,
  MsgAppResp = 4,
  MsgVote = 5,
  MsgVoteResp = 6,
  MsgSnap = 7,
  MsgHeartbeat = 8,
  MsgHeartbeatResp = 9,
  MsgUnreachable = 10,
  MsgSnapStatus = 11,
  MsgCheckQuorum = 12,
  MsgTransferLeader = 13,
  MsgTimeoutNow = 14,
  MsgReadIndex = 15,
  MsgReadIndexResp = 16,
  MsgPreVote = 17,
  MsgPreVoteResp = 18
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MsgHup;
constexpr MessageType MessageType_MAX = MsgPreVoteResp;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ConfChangeTransition : int {
  ConfChangeTransitionAuto = 0,
  ConfChangeTransitionJointImplicit = 1,
  ConfChangeTransitionJointExplicit = 2
};
bool ConfChangeTransition_IsValid(int value);
constexpr ConfChangeTransition ConfChangeTransition_MIN = ConfChangeTransitionAuto;
constexpr ConfChangeTransition ConfChangeTransition_MAX = ConfChangeTransitionJointExplicit;
constexpr int ConfChangeTransition_ARRAYSIZE = ConfChangeTransition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfChangeTransition_descriptor();
template<typename T>
inline const std::string& ConfChangeTransition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfChangeTransition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfChangeTransition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfChangeTransition_descriptor(), enum_t_value);
}
inline bool ConfChangeTransition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfChangeTransition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfChangeTransition>(
    ConfChangeTransition_descriptor(), name, value);
}
enum ConfChangeType : int {
  ConfChangeAddNode = 0,
  ConfChangeRemoveNode = 1,
  ConfChangeUpdateNode = 2,
  ConfChangeAddLearnerNode = 3
};
bool ConfChangeType_IsValid(int value);
constexpr ConfChangeType ConfChangeType_MIN = ConfChangeAddNode;
constexpr ConfChangeType ConfChangeType_MAX = ConfChangeAddLearnerNode;
constexpr int ConfChangeType_ARRAYSIZE = ConfChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfChangeType_descriptor();
template<typename T>
inline const std::string& ConfChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfChangeType_descriptor(), enum_t_value);
}
inline bool ConfChangeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfChangeType>(
    ConfChangeType_descriptor(), name, value);
}
// ===================================================================

class Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_craft_2fraft_2eproto);
    return ::descriptor_table_craft_2fraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kTermFieldNumber = 2,
    kIndexFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional bytes Data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint64 Term = 2;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 Index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .raftpb.EntryType Type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::raftpb::EntryType type() const;
  void set_type(::raftpb::EntryType value);
  private:
  ::raftpb::EntryType _internal_type() const;
  void _internal_set_type(::raftpb::EntryType value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  int type_;
  friend struct ::TableStruct_craft_2fraft_2eproto;
};
// -------------------------------------------------------------------

class SnapshotMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.SnapshotMetadata) */ {
 public:
  inline SnapshotMetadata() : SnapshotMetadata(nullptr) {}
  virtual ~SnapshotMetadata();

  SnapshotMetadata(const SnapshotMetadata& from);
  SnapshotMetadata(SnapshotMetadata&& from) noexcept
    : SnapshotMetadata() {
    *this = ::std::move(from);
  }

  inline SnapshotMetadata& operator=(const SnapshotMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotMetadata& operator=(SnapshotMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotMetadata& default_instance();

  static inline const SnapshotMetadata* internal_default_instance() {
    return reinterpret_cast<const SnapshotMetadata*>(
               &_SnapshotMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SnapshotMetadata& a, SnapshotMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotMetadata* New() const final {
    return CreateMaybeMessage<SnapshotMetadata>(nullptr);
  }

  SnapshotMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotMetadata& from);
  void MergeFrom(const SnapshotMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.SnapshotMetadata";
  }
  protected:
  explicit SnapshotMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_craft_2fraft_2eproto);
    return ::descriptor_table_craft_2fraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfStateFieldNumber = 1,
    kIndexFieldNumber = 2,
    kTermFieldNumber = 3,
  };
  // optional .raftpb.ConfState conf_state = 1;
  bool has_conf_state() const;
  private:
  bool _internal_has_conf_state() const;
  public:
  void clear_conf_state();
  const ::raftpb::ConfState& conf_state() const;
  ::raftpb::ConfState* release_conf_state();
  ::raftpb::ConfState* mutable_conf_state();
  void set_allocated_conf_state(::raftpb::ConfState* conf_state);
  private:
  const ::raftpb::ConfState& _internal_conf_state() const;
  ::raftpb::ConfState* _internal_mutable_conf_state();
  public:
  void unsafe_arena_set_allocated_conf_state(
      ::raftpb::ConfState* conf_state);
  ::raftpb::ConfState* unsafe_arena_release_conf_state();

  // optional uint64 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 term = 3;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.SnapshotMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::raftpb::ConfState* conf_state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  friend struct ::TableStruct_craft_2fraft_2eproto;
};
// -------------------------------------------------------------------

class Snapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.Snapshot) */ {
 public:
  inline Snapshot() : Snapshot(nullptr) {}
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Snapshot& default_instance();

  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(Snapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const final {
    return CreateMaybeMessage<Snapshot>(nullptr);
  }

  Snapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Snapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.Snapshot";
  }
  protected:
  explicit Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_craft_2fraft_2eproto);
    return ::descriptor_table_craft_2fraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .raftpb.SnapshotMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::raftpb::SnapshotMetadata& metadata() const;
  ::raftpb::SnapshotMetadata* release_metadata();
  ::raftpb::SnapshotMetadata* mutable_metadata();
  void set_allocated_metadata(::raftpb::SnapshotMetadata* metadata);
  private:
  const ::raftpb::SnapshotMetadata& _internal_metadata() const;
  ::raftpb::SnapshotMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::raftpb::SnapshotMetadata* metadata);
  ::raftpb::SnapshotMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:raftpb.Snapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::raftpb::SnapshotMetadata* metadata_;
  friend struct ::TableStruct_craft_2fraft_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_craft_2fraft_2eproto);
    return ::descriptor_table_craft_2fraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 7,
    kContextFieldNumber = 12,
    kSnapshotFieldNumber = 9,
    kToFieldNumber = 2,
    kFromFieldNumber = 3,
    kTermFieldNumber = 4,
    kLogTermFieldNumber = 5,
    kTypeFieldNumber = 1,
    kRejectFieldNumber = 10,
    kIndexFieldNumber = 6,
    kCommitFieldNumber = 8,
    kRejectHintFieldNumber = 11,
  };
  // repeated .raftpb.Entry entries = 7;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::raftpb::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >*
      mutable_entries();
  private:
  const ::raftpb::Entry& _internal_entries(int index) const;
  ::raftpb::Entry* _internal_add_entries();
  public:
  const ::raftpb::Entry& entries(int index) const;
  ::raftpb::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >&
      entries() const;

  // optional bytes context = 12;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // optional .raftpb.Snapshot snapshot = 9;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::raftpb::Snapshot& snapshot() const;
  ::raftpb::Snapshot* release_snapshot();
  ::raftpb::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::raftpb::Snapshot* snapshot);
  private:
  const ::raftpb::Snapshot& _internal_snapshot() const;
  ::raftpb::Snapshot* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::raftpb::Snapshot* snapshot);
  ::raftpb::Snapshot* unsafe_arena_release_snapshot();

  // optional uint64 to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 from = 3;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 term = 4;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 logTerm = 5;
  bool has_logterm() const;
  private:
  bool _internal_has_logterm() const;
  public:
  void clear_logterm();
  ::PROTOBUF_NAMESPACE_ID::uint64 logterm() const;
  void set_logterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_logterm() const;
  void _internal_set_logterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .raftpb.MessageType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::raftpb::MessageType type() const;
  void set_type(::raftpb::MessageType value);
  private:
  ::raftpb::MessageType _internal_type() const;
  void _internal_set_type(::raftpb::MessageType value);
  public:

  // optional bool reject = 10;
  bool has_reject() const;
  private:
  bool _internal_has_reject() const;
  public:
  void clear_reject();
  bool reject() const;
  void set_reject(bool value);
  private:
  bool _internal_reject() const;
  void _internal_set_reject(bool value);
  public:

  // optional uint64 index = 6;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 commit = 8;
  bool has_commit() const;
  private:
  bool _internal_has_commit() const;
  public:
  void clear_commit();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit() const;
  void set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit() const;
  void _internal_set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 rejectHint = 11;
  bool has_rejecthint() const;
  private:
  bool _internal_has_rejecthint() const;
  public:
  void clear_rejecthint();
  ::PROTOBUF_NAMESPACE_ID::uint64 rejecthint() const;
  void set_rejecthint(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rejecthint() const;
  void _internal_set_rejecthint(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::raftpb::Snapshot* snapshot_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 logterm_;
  int type_;
  bool reject_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rejecthint_;
  friend struct ::TableStruct_craft_2fraft_2eproto;
};
// -------------------------------------------------------------------

class HardState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.HardState) */ {
 public:
  inline HardState() : HardState(nullptr) {}
  virtual ~HardState();

  HardState(const HardState& from);
  HardState(HardState&& from) noexcept
    : HardState() {
    *this = ::std::move(from);
  }

  inline HardState& operator=(const HardState& from) {
    CopyFrom(from);
    return *this;
  }
  inline HardState& operator=(HardState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HardState& default_instance();

  static inline const HardState* internal_default_instance() {
    return reinterpret_cast<const HardState*>(
               &_HardState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HardState& a, HardState& b) {
    a.Swap(&b);
  }
  inline void Swap(HardState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HardState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HardState* New() const final {
    return CreateMaybeMessage<HardState>(nullptr);
  }

  HardState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HardState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HardState& from);
  void MergeFrom(const HardState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HardState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.HardState";
  }
  protected:
  explicit HardState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_craft_2fraft_2eproto);
    return ::descriptor_table_craft_2fraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteFieldNumber = 2,
    kCommitFieldNumber = 3,
  };
  // optional uint64 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 vote = 2;
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  ::PROTOBUF_NAMESPACE_ID::uint64 vote() const;
  void set_vote(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vote() const;
  void _internal_set_vote(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 commit = 3;
  bool has_commit() const;
  private:
  bool _internal_has_commit() const;
  public:
  void clear_commit();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit() const;
  void set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit() const;
  void _internal_set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.HardState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_;
  friend struct ::TableStruct_craft_2fraft_2eproto;
};
// -------------------------------------------------------------------

class ConfState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.ConfState) */ {
 public:
  inline ConfState() : ConfState(nullptr) {}
  virtual ~ConfState();

  ConfState(const ConfState& from);
  ConfState(ConfState&& from) noexcept
    : ConfState() {
    *this = ::std::move(from);
  }

  inline ConfState& operator=(const ConfState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfState& operator=(ConfState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfState& default_instance();

  static inline const ConfState* internal_default_instance() {
    return reinterpret_cast<const ConfState*>(
               &_ConfState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConfState& a, ConfState& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfState* New() const final {
    return CreateMaybeMessage<ConfState>(nullptr);
  }

  ConfState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfState& from);
  void MergeFrom(const ConfState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.ConfState";
  }
  protected:
  explicit ConfState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_craft_2fraft_2eproto);
    return ::descriptor_table_craft_2fraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotersFieldNumber = 1,
    kLearnersFieldNumber = 2,
    kVotersOutgoingFieldNumber = 3,
    kLearnersNextFieldNumber = 4,
    kAutoLeaveFieldNumber = 5,
  };
  // repeated uint64 voters = 1;
  int voters_size() const;
  private:
  int _internal_voters_size() const;
  public:
  void clear_voters();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_voters(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_voters() const;
  void _internal_add_voters(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_voters();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 voters(int index) const;
  void set_voters(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_voters(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      voters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_voters();

  // repeated uint64 learners = 2;
  int learners_size() const;
  private:
  int _internal_learners_size() const;
  public:
  void clear_learners();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_learners(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_learners() const;
  void _internal_add_learners(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_learners();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 learners(int index) const;
  void set_learners(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_learners(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      learners() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_learners();

  // repeated uint64 voters_outgoing = 3;
  int voters_outgoing_size() const;
  private:
  int _internal_voters_outgoing_size() const;
  public:
  void clear_voters_outgoing();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_voters_outgoing(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_voters_outgoing() const;
  void _internal_add_voters_outgoing(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_voters_outgoing();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 voters_outgoing(int index) const;
  void set_voters_outgoing(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_voters_outgoing(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      voters_outgoing() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_voters_outgoing();

  // repeated uint64 learners_next = 4;
  int learners_next_size() const;
  private:
  int _internal_learners_next_size() const;
  public:
  void clear_learners_next();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_learners_next(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_learners_next() const;
  void _internal_add_learners_next(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_learners_next();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 learners_next(int index) const;
  void set_learners_next(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_learners_next(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      learners_next() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_learners_next();

  // optional bool auto_leave = 5;
  bool has_auto_leave() const;
  private:
  bool _internal_has_auto_leave() const;
  public:
  void clear_auto_leave();
  bool auto_leave() const;
  void set_auto_leave(bool value);
  private:
  bool _internal_auto_leave() const;
  void _internal_set_auto_leave(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.ConfState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > voters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > learners_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > voters_outgoing_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > learners_next_;
  bool auto_leave_;
  friend struct ::TableStruct_craft_2fraft_2eproto;
};
// -------------------------------------------------------------------

class ConfChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.ConfChange) */ {
 public:
  inline ConfChange() : ConfChange(nullptr) {}
  virtual ~ConfChange();

  ConfChange(const ConfChange& from);
  ConfChange(ConfChange&& from) noexcept
    : ConfChange() {
    *this = ::std::move(from);
  }

  inline ConfChange& operator=(const ConfChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfChange& operator=(ConfChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfChange& default_instance();

  static inline const ConfChange* internal_default_instance() {
    return reinterpret_cast<const ConfChange*>(
               &_ConfChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConfChange& a, ConfChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfChange* New() const final {
    return CreateMaybeMessage<ConfChange>(nullptr);
  }

  ConfChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfChange& from);
  void MergeFrom(const ConfChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.ConfChange";
  }
  protected:
  explicit ConfChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_craft_2fraft_2eproto);
    return ::descriptor_table_craft_2fraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 4,
    kIdFieldNumber = 1,
    kNodeIdFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // optional bytes context = 4;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 node_id = 3;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .raftpb.ConfChangeType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::raftpb::ConfChangeType type() const;
  void set_type(::raftpb::ConfChangeType value);
  private:
  ::raftpb::ConfChangeType _internal_type() const;
  void _internal_set_type(::raftpb::ConfChangeType value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.ConfChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id_;
  int type_;
  friend struct ::TableStruct_craft_2fraft_2eproto;
};
// -------------------------------------------------------------------

class ConfChangeSingle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.ConfChangeSingle) */ {
 public:
  inline ConfChangeSingle() : ConfChangeSingle(nullptr) {}
  virtual ~ConfChangeSingle();

  ConfChangeSingle(const ConfChangeSingle& from);
  ConfChangeSingle(ConfChangeSingle&& from) noexcept
    : ConfChangeSingle() {
    *this = ::std::move(from);
  }

  inline ConfChangeSingle& operator=(const ConfChangeSingle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfChangeSingle& operator=(ConfChangeSingle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfChangeSingle& default_instance();

  static inline const ConfChangeSingle* internal_default_instance() {
    return reinterpret_cast<const ConfChangeSingle*>(
               &_ConfChangeSingle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConfChangeSingle& a, ConfChangeSingle& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfChangeSingle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfChangeSingle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfChangeSingle* New() const final {
    return CreateMaybeMessage<ConfChangeSingle>(nullptr);
  }

  ConfChangeSingle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfChangeSingle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfChangeSingle& from);
  void MergeFrom(const ConfChangeSingle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfChangeSingle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.ConfChangeSingle";
  }
  protected:
  explicit ConfChangeSingle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_craft_2fraft_2eproto);
    return ::descriptor_table_craft_2fraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional uint64 node_id = 2;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .raftpb.ConfChangeType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::raftpb::ConfChangeType type() const;
  void set_type(::raftpb::ConfChangeType value);
  private:
  ::raftpb::ConfChangeType _internal_type() const;
  void _internal_set_type(::raftpb::ConfChangeType value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.ConfChangeSingle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id_;
  int type_;
  friend struct ::TableStruct_craft_2fraft_2eproto;
};
// -------------------------------------------------------------------

class ConfChangeV2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.ConfChangeV2) */ {
 public:
  inline ConfChangeV2() : ConfChangeV2(nullptr) {}
  virtual ~ConfChangeV2();

  ConfChangeV2(const ConfChangeV2& from);
  ConfChangeV2(ConfChangeV2&& from) noexcept
    : ConfChangeV2() {
    *this = ::std::move(from);
  }

  inline ConfChangeV2& operator=(const ConfChangeV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfChangeV2& operator=(ConfChangeV2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfChangeV2& default_instance();

  static inline const ConfChangeV2* internal_default_instance() {
    return reinterpret_cast<const ConfChangeV2*>(
               &_ConfChangeV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConfChangeV2& a, ConfChangeV2& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfChangeV2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfChangeV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfChangeV2* New() const final {
    return CreateMaybeMessage<ConfChangeV2>(nullptr);
  }

  ConfChangeV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfChangeV2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfChangeV2& from);
  void MergeFrom(const ConfChangeV2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfChangeV2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.ConfChangeV2";
  }
  protected:
  explicit ConfChangeV2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_craft_2fraft_2eproto);
    return ::descriptor_table_craft_2fraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 2,
    kContextFieldNumber = 3,
    kTransitionFieldNumber = 1,
  };
  // repeated .raftpb.ConfChangeSingle changes = 2;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  ::raftpb::ConfChangeSingle* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::ConfChangeSingle >*
      mutable_changes();
  private:
  const ::raftpb::ConfChangeSingle& _internal_changes(int index) const;
  ::raftpb::ConfChangeSingle* _internal_add_changes();
  public:
  const ::raftpb::ConfChangeSingle& changes(int index) const;
  ::raftpb::ConfChangeSingle* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::ConfChangeSingle >&
      changes() const;

  // optional bytes context = 3;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // optional .raftpb.ConfChangeTransition transition = 1;
  bool has_transition() const;
  private:
  bool _internal_has_transition() const;
  public:
  void clear_transition();
  ::raftpb::ConfChangeTransition transition() const;
  void set_transition(::raftpb::ConfChangeTransition value);
  private:
  ::raftpb::ConfChangeTransition _internal_transition() const;
  void _internal_set_transition(::raftpb::ConfChangeTransition value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.ConfChangeV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::ConfChangeSingle > changes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  int transition_;
  friend struct ::TableStruct_craft_2fraft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// optional uint64 Term = 2;
inline bool Entry::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Entry::has_term() const {
  return _internal_has_term();
}
inline void Entry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.Term)
  return _internal_term();
}
inline void Entry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
}
inline void Entry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftpb.Entry.Term)
}

// optional uint64 Index = 3;
inline bool Entry::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Entry::has_index() const {
  return _internal_has_index();
}
inline void Entry::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::index() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.Index)
  return _internal_index();
}
inline void Entry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
}
inline void Entry::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raftpb.Entry.Index)
}

// optional .raftpb.EntryType Type = 1;
inline bool Entry::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Entry::has_type() const {
  return _internal_has_type();
}
inline void Entry::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::raftpb::EntryType Entry::_internal_type() const {
  return static_cast< ::raftpb::EntryType >(type_);
}
inline ::raftpb::EntryType Entry::type() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.Type)
  return _internal_type();
}
inline void Entry::_internal_set_type(::raftpb::EntryType value) {
  assert(::raftpb::EntryType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void Entry::set_type(::raftpb::EntryType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:raftpb.Entry.Type)
}

// optional bytes Data = 4;
inline bool Entry::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Entry::has_data() const {
  return _internal_has_data();
}
inline void Entry::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Entry::data() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.Data)
  return _internal_data();
}
inline void Entry::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:raftpb.Entry.Data)
}
inline std::string* Entry::mutable_data() {
  // @@protoc_insertion_point(field_mutable:raftpb.Entry.Data)
  return _internal_mutable_data();
}
inline const std::string& Entry::_internal_data() const {
  return data_.Get();
}
inline void Entry::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Entry::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Entry.Data)
}
inline void Entry::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raftpb.Entry.Data)
}
inline void Entry::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftpb.Entry.Data)
}
inline std::string* Entry::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Entry::release_data() {
  // @@protoc_insertion_point(field_release:raftpb.Entry.Data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Entry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftpb.Entry.Data)
}

// -------------------------------------------------------------------

// SnapshotMetadata

// optional .raftpb.ConfState conf_state = 1;
inline bool SnapshotMetadata::_internal_has_conf_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || conf_state_ != nullptr);
  return value;
}
inline bool SnapshotMetadata::has_conf_state() const {
  return _internal_has_conf_state();
}
inline void SnapshotMetadata::clear_conf_state() {
  if (conf_state_ != nullptr) conf_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::raftpb::ConfState& SnapshotMetadata::_internal_conf_state() const {
  const ::raftpb::ConfState* p = conf_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::raftpb::ConfState&>(
      ::raftpb::_ConfState_default_instance_);
}
inline const ::raftpb::ConfState& SnapshotMetadata::conf_state() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotMetadata.conf_state)
  return _internal_conf_state();
}
inline void SnapshotMetadata::unsafe_arena_set_allocated_conf_state(
    ::raftpb::ConfState* conf_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conf_state_);
  }
  conf_state_ = conf_state;
  if (conf_state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftpb.SnapshotMetadata.conf_state)
}
inline ::raftpb::ConfState* SnapshotMetadata::release_conf_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::raftpb::ConfState* temp = conf_state_;
  conf_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::raftpb::ConfState* SnapshotMetadata::unsafe_arena_release_conf_state() {
  // @@protoc_insertion_point(field_release:raftpb.SnapshotMetadata.conf_state)
  _has_bits_[0] &= ~0x00000001u;
  ::raftpb::ConfState* temp = conf_state_;
  conf_state_ = nullptr;
  return temp;
}
inline ::raftpb::ConfState* SnapshotMetadata::_internal_mutable_conf_state() {
  _has_bits_[0] |= 0x00000001u;
  if (conf_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftpb::ConfState>(GetArena());
    conf_state_ = p;
  }
  return conf_state_;
}
inline ::raftpb::ConfState* SnapshotMetadata::mutable_conf_state() {
  // @@protoc_insertion_point(field_mutable:raftpb.SnapshotMetadata.conf_state)
  return _internal_mutable_conf_state();
}
inline void SnapshotMetadata::set_allocated_conf_state(::raftpb::ConfState* conf_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conf_state_;
  }
  if (conf_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conf_state);
    if (message_arena != submessage_arena) {
      conf_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  conf_state_ = conf_state;
  // @@protoc_insertion_point(field_set_allocated:raftpb.SnapshotMetadata.conf_state)
}

// optional uint64 index = 2;
inline bool SnapshotMetadata::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SnapshotMetadata::has_index() const {
  return _internal_has_index();
}
inline void SnapshotMetadata::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotMetadata::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotMetadata::index() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotMetadata.index)
  return _internal_index();
}
inline void SnapshotMetadata::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void SnapshotMetadata::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raftpb.SnapshotMetadata.index)
}

// optional uint64 term = 3;
inline bool SnapshotMetadata::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SnapshotMetadata::has_term() const {
  return _internal_has_term();
}
inline void SnapshotMetadata::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotMetadata::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotMetadata::term() const {
  // @@protoc_insertion_point(field_get:raftpb.SnapshotMetadata.term)
  return _internal_term();
}
inline void SnapshotMetadata::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  term_ = value;
}
inline void SnapshotMetadata::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftpb.SnapshotMetadata.term)
}

// -------------------------------------------------------------------

// Snapshot

// optional bytes data = 1;
inline bool Snapshot::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Snapshot::has_data() const {
  return _internal_has_data();
}
inline void Snapshot::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Snapshot::data() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.data)
  return _internal_data();
}
inline void Snapshot::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:raftpb.Snapshot.data)
}
inline std::string* Snapshot::mutable_data() {
  // @@protoc_insertion_point(field_mutable:raftpb.Snapshot.data)
  return _internal_mutable_data();
}
inline const std::string& Snapshot::_internal_data() const {
  return data_.Get();
}
inline void Snapshot::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Snapshot::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Snapshot.data)
}
inline void Snapshot::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raftpb.Snapshot.data)
}
inline void Snapshot::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftpb.Snapshot.data)
}
inline std::string* Snapshot::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Snapshot::release_data() {
  // @@protoc_insertion_point(field_release:raftpb.Snapshot.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftpb.Snapshot.data)
}

// optional .raftpb.SnapshotMetadata metadata = 2;
inline bool Snapshot::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool Snapshot::has_metadata() const {
  return _internal_has_metadata();
}
inline void Snapshot::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::raftpb::SnapshotMetadata& Snapshot::_internal_metadata() const {
  const ::raftpb::SnapshotMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::raftpb::SnapshotMetadata&>(
      ::raftpb::_SnapshotMetadata_default_instance_);
}
inline const ::raftpb::SnapshotMetadata& Snapshot::metadata() const {
  // @@protoc_insertion_point(field_get:raftpb.Snapshot.metadata)
  return _internal_metadata();
}
inline void Snapshot::unsafe_arena_set_allocated_metadata(
    ::raftpb::SnapshotMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftpb.Snapshot.metadata)
}
inline ::raftpb::SnapshotMetadata* Snapshot::release_metadata() {
  _has_bits_[0] &= ~0x00000002u;
  ::raftpb::SnapshotMetadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::raftpb::SnapshotMetadata* Snapshot::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:raftpb.Snapshot.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::raftpb::SnapshotMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::raftpb::SnapshotMetadata* Snapshot::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftpb::SnapshotMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::raftpb::SnapshotMetadata* Snapshot::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:raftpb.Snapshot.metadata)
  return _internal_mutable_metadata();
}
inline void Snapshot::set_allocated_metadata(::raftpb::SnapshotMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:raftpb.Snapshot.metadata)
}

// -------------------------------------------------------------------

// Message

// optional .raftpb.MessageType type = 1;
inline bool Message::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Message::has_type() const {
  return _internal_has_type();
}
inline void Message::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::raftpb::MessageType Message::_internal_type() const {
  return static_cast< ::raftpb::MessageType >(type_);
}
inline ::raftpb::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::raftpb::MessageType value) {
  assert(::raftpb::MessageType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void Message::set_type(::raftpb::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.type)
}

// optional uint64 to = 2;
inline bool Message::_internal_has_to() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message::has_to() const {
  return _internal_has_to();
}
inline void Message::clear_to() {
  to_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::to() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.to)
  return _internal_to();
}
inline void Message::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  to_ = value;
}
inline void Message::set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.to)
}

// optional uint64 from = 3;
inline bool Message::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Message::has_from() const {
  return _internal_has_from();
}
inline void Message::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::from() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.from)
  return _internal_from();
}
inline void Message::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  from_ = value;
}
inline void Message::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.from)
}

// optional uint64 term = 4;
inline bool Message::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Message::has_term() const {
  return _internal_has_term();
}
inline void Message::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::term() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.term)
  return _internal_term();
}
inline void Message::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  term_ = value;
}
inline void Message::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.term)
}

// optional uint64 logTerm = 5;
inline bool Message::_internal_has_logterm() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Message::has_logterm() const {
  return _internal_has_logterm();
}
inline void Message::clear_logterm() {
  logterm_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_logterm() const {
  return logterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::logterm() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.logTerm)
  return _internal_logterm();
}
inline void Message::_internal_set_logterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  logterm_ = value;
}
inline void Message::set_logterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_logterm(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.logTerm)
}

// optional uint64 index = 6;
inline bool Message::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Message::has_index() const {
  return _internal_has_index();
}
inline void Message::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::index() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.index)
  return _internal_index();
}
inline void Message::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  index_ = value;
}
inline void Message::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.index)
}

// repeated .raftpb.Entry entries = 7;
inline int Message::_internal_entries_size() const {
  return entries_.size();
}
inline int Message::entries_size() const {
  return _internal_entries_size();
}
inline void Message::clear_entries() {
  entries_.Clear();
}
inline ::raftpb::Entry* Message::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raftpb.Message.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >*
Message::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.Message.entries)
  return &entries_;
}
inline const ::raftpb::Entry& Message::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::raftpb::Entry& Message::entries(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.Message.entries)
  return _internal_entries(index);
}
inline ::raftpb::Entry* Message::_internal_add_entries() {
  return entries_.Add();
}
inline ::raftpb::Entry* Message::add_entries() {
  // @@protoc_insertion_point(field_add:raftpb.Message.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >&
Message::entries() const {
  // @@protoc_insertion_point(field_list:raftpb.Message.entries)
  return entries_;
}

// optional uint64 commit = 8;
inline bool Message::_internal_has_commit() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Message::has_commit() const {
  return _internal_has_commit();
}
inline void Message::clear_commit() {
  commit_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_commit() const {
  return commit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::commit() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.commit)
  return _internal_commit();
}
inline void Message::_internal_set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  commit_ = value;
}
inline void Message::set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.commit)
}

// optional .raftpb.Snapshot snapshot = 9;
inline bool Message::_internal_has_snapshot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || snapshot_ != nullptr);
  return value;
}
inline bool Message::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void Message::clear_snapshot() {
  if (snapshot_ != nullptr) snapshot_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::raftpb::Snapshot& Message::_internal_snapshot() const {
  const ::raftpb::Snapshot* p = snapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::raftpb::Snapshot&>(
      ::raftpb::_Snapshot_default_instance_);
}
inline const ::raftpb::Snapshot& Message::snapshot() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.snapshot)
  return _internal_snapshot();
}
inline void Message::unsafe_arena_set_allocated_snapshot(
    ::raftpb::Snapshot* snapshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_);
  }
  snapshot_ = snapshot;
  if (snapshot) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftpb.Message.snapshot)
}
inline ::raftpb::Snapshot* Message::release_snapshot() {
  _has_bits_[0] &= ~0x00000002u;
  ::raftpb::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::raftpb::Snapshot* Message::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_release:raftpb.Message.snapshot)
  _has_bits_[0] &= ~0x00000002u;
  ::raftpb::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::raftpb::Snapshot* Message::_internal_mutable_snapshot() {
  _has_bits_[0] |= 0x00000002u;
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::raftpb::Snapshot>(GetArena());
    snapshot_ = p;
  }
  return snapshot_;
}
inline ::raftpb::Snapshot* Message::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:raftpb.Message.snapshot)
  return _internal_mutable_snapshot();
}
inline void Message::set_allocated_snapshot(::raftpb::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:raftpb.Message.snapshot)
}

// optional bool reject = 10;
inline bool Message::_internal_has_reject() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Message::has_reject() const {
  return _internal_has_reject();
}
inline void Message::clear_reject() {
  reject_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Message::_internal_reject() const {
  return reject_;
}
inline bool Message::reject() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.reject)
  return _internal_reject();
}
inline void Message::_internal_set_reject(bool value) {
  _has_bits_[0] |= 0x00000080u;
  reject_ = value;
}
inline void Message::set_reject(bool value) {
  _internal_set_reject(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.reject)
}

// optional uint64 rejectHint = 11;
inline bool Message::_internal_has_rejecthint() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Message::has_rejecthint() const {
  return _internal_has_rejecthint();
}
inline void Message::clear_rejecthint() {
  rejecthint_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_rejecthint() const {
  return rejecthint_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::rejecthint() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.rejectHint)
  return _internal_rejecthint();
}
inline void Message::_internal_set_rejecthint(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  rejecthint_ = value;
}
inline void Message::set_rejecthint(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rejecthint(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.rejectHint)
}

// optional bytes context = 12;
inline bool Message::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message::has_context() const {
  return _internal_has_context();
}
inline void Message::clear_context() {
  context_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message::context() const {
  // @@protoc_insertion_point(field_get:raftpb.Message.context)
  return _internal_context();
}
inline void Message::set_context(const std::string& value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:raftpb.Message.context)
}
inline std::string* Message::mutable_context() {
  // @@protoc_insertion_point(field_mutable:raftpb.Message.context)
  return _internal_mutable_context();
}
inline const std::string& Message::_internal_context() const {
  return context_.Get();
}
inline void Message::_internal_set_context(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message::set_context(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Message.context)
}
inline void Message::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raftpb.Message.context)
}
inline void Message::set_context(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftpb.Message.context)
}
inline std::string* Message::_internal_mutable_context() {
  _has_bits_[0] |= 0x00000001u;
  return context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message::release_context() {
  // @@protoc_insertion_point(field_release:raftpb.Message.context)
  if (!_internal_has_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return context_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftpb.Message.context)
}

// -------------------------------------------------------------------

// HardState

// optional uint64 term = 1;
inline bool HardState::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HardState::has_term() const {
  return _internal_has_term();
}
inline void HardState::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardState::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardState::term() const {
  // @@protoc_insertion_point(field_get:raftpb.HardState.term)
  return _internal_term();
}
inline void HardState::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void HardState::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftpb.HardState.term)
}

// optional uint64 vote = 2;
inline bool HardState::_internal_has_vote() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HardState::has_vote() const {
  return _internal_has_vote();
}
inline void HardState::clear_vote() {
  vote_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardState::_internal_vote() const {
  return vote_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardState::vote() const {
  // @@protoc_insertion_point(field_get:raftpb.HardState.vote)
  return _internal_vote();
}
inline void HardState::_internal_set_vote(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  vote_ = value;
}
inline void HardState::set_vote(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vote(value);
  // @@protoc_insertion_point(field_set:raftpb.HardState.vote)
}

// optional uint64 commit = 3;
inline bool HardState::_internal_has_commit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HardState::has_commit() const {
  return _internal_has_commit();
}
inline void HardState::clear_commit() {
  commit_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardState::_internal_commit() const {
  return commit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardState::commit() const {
  // @@protoc_insertion_point(field_get:raftpb.HardState.commit)
  return _internal_commit();
}
inline void HardState::_internal_set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  commit_ = value;
}
inline void HardState::set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit(value);
  // @@protoc_insertion_point(field_set:raftpb.HardState.commit)
}

// -------------------------------------------------------------------

// ConfState

// repeated uint64 voters = 1;
inline int ConfState::_internal_voters_size() const {
  return voters_.size();
}
inline int ConfState::voters_size() const {
  return _internal_voters_size();
}
inline void ConfState::clear_voters() {
  voters_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfState::_internal_voters(int index) const {
  return voters_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfState::voters(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.ConfState.voters)
  return _internal_voters(index);
}
inline void ConfState::set_voters(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  voters_.Set(index, value);
  // @@protoc_insertion_point(field_set:raftpb.ConfState.voters)
}
inline void ConfState::_internal_add_voters(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  voters_.Add(value);
}
inline void ConfState::add_voters(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_voters(value);
  // @@protoc_insertion_point(field_add:raftpb.ConfState.voters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ConfState::_internal_voters() const {
  return voters_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ConfState::voters() const {
  // @@protoc_insertion_point(field_list:raftpb.ConfState.voters)
  return _internal_voters();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ConfState::_internal_mutable_voters() {
  return &voters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ConfState::mutable_voters() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.ConfState.voters)
  return _internal_mutable_voters();
}

// repeated uint64 learners = 2;
inline int ConfState::_internal_learners_size() const {
  return learners_.size();
}
inline int ConfState::learners_size() const {
  return _internal_learners_size();
}
inline void ConfState::clear_learners() {
  learners_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfState::_internal_learners(int index) const {
  return learners_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfState::learners(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.ConfState.learners)
  return _internal_learners(index);
}
inline void ConfState::set_learners(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  learners_.Set(index, value);
  // @@protoc_insertion_point(field_set:raftpb.ConfState.learners)
}
inline void ConfState::_internal_add_learners(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  learners_.Add(value);
}
inline void ConfState::add_learners(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_learners(value);
  // @@protoc_insertion_point(field_add:raftpb.ConfState.learners)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ConfState::_internal_learners() const {
  return learners_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ConfState::learners() const {
  // @@protoc_insertion_point(field_list:raftpb.ConfState.learners)
  return _internal_learners();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ConfState::_internal_mutable_learners() {
  return &learners_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ConfState::mutable_learners() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.ConfState.learners)
  return _internal_mutable_learners();
}

// repeated uint64 voters_outgoing = 3;
inline int ConfState::_internal_voters_outgoing_size() const {
  return voters_outgoing_.size();
}
inline int ConfState::voters_outgoing_size() const {
  return _internal_voters_outgoing_size();
}
inline void ConfState::clear_voters_outgoing() {
  voters_outgoing_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfState::_internal_voters_outgoing(int index) const {
  return voters_outgoing_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfState::voters_outgoing(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.ConfState.voters_outgoing)
  return _internal_voters_outgoing(index);
}
inline void ConfState::set_voters_outgoing(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  voters_outgoing_.Set(index, value);
  // @@protoc_insertion_point(field_set:raftpb.ConfState.voters_outgoing)
}
inline void ConfState::_internal_add_voters_outgoing(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  voters_outgoing_.Add(value);
}
inline void ConfState::add_voters_outgoing(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_voters_outgoing(value);
  // @@protoc_insertion_point(field_add:raftpb.ConfState.voters_outgoing)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ConfState::_internal_voters_outgoing() const {
  return voters_outgoing_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ConfState::voters_outgoing() const {
  // @@protoc_insertion_point(field_list:raftpb.ConfState.voters_outgoing)
  return _internal_voters_outgoing();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ConfState::_internal_mutable_voters_outgoing() {
  return &voters_outgoing_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ConfState::mutable_voters_outgoing() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.ConfState.voters_outgoing)
  return _internal_mutable_voters_outgoing();
}

// repeated uint64 learners_next = 4;
inline int ConfState::_internal_learners_next_size() const {
  return learners_next_.size();
}
inline int ConfState::learners_next_size() const {
  return _internal_learners_next_size();
}
inline void ConfState::clear_learners_next() {
  learners_next_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfState::_internal_learners_next(int index) const {
  return learners_next_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfState::learners_next(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.ConfState.learners_next)
  return _internal_learners_next(index);
}
inline void ConfState::set_learners_next(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  learners_next_.Set(index, value);
  // @@protoc_insertion_point(field_set:raftpb.ConfState.learners_next)
}
inline void ConfState::_internal_add_learners_next(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  learners_next_.Add(value);
}
inline void ConfState::add_learners_next(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_learners_next(value);
  // @@protoc_insertion_point(field_add:raftpb.ConfState.learners_next)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ConfState::_internal_learners_next() const {
  return learners_next_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ConfState::learners_next() const {
  // @@protoc_insertion_point(field_list:raftpb.ConfState.learners_next)
  return _internal_learners_next();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ConfState::_internal_mutable_learners_next() {
  return &learners_next_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ConfState::mutable_learners_next() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.ConfState.learners_next)
  return _internal_mutable_learners_next();
}

// optional bool auto_leave = 5;
inline bool ConfState::_internal_has_auto_leave() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfState::has_auto_leave() const {
  return _internal_has_auto_leave();
}
inline void ConfState::clear_auto_leave() {
  auto_leave_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ConfState::_internal_auto_leave() const {
  return auto_leave_;
}
inline bool ConfState::auto_leave() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfState.auto_leave)
  return _internal_auto_leave();
}
inline void ConfState::_internal_set_auto_leave(bool value) {
  _has_bits_[0] |= 0x00000001u;
  auto_leave_ = value;
}
inline void ConfState::set_auto_leave(bool value) {
  _internal_set_auto_leave(value);
  // @@protoc_insertion_point(field_set:raftpb.ConfState.auto_leave)
}

// -------------------------------------------------------------------

// ConfChange

// optional .raftpb.ConfChangeType type = 2;
inline bool ConfChange::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConfChange::has_type() const {
  return _internal_has_type();
}
inline void ConfChange::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::raftpb::ConfChangeType ConfChange::_internal_type() const {
  return static_cast< ::raftpb::ConfChangeType >(type_);
}
inline ::raftpb::ConfChangeType ConfChange::type() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChange.type)
  return _internal_type();
}
inline void ConfChange::_internal_set_type(::raftpb::ConfChangeType value) {
  assert(::raftpb::ConfChangeType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void ConfChange::set_type(::raftpb::ConfChangeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:raftpb.ConfChange.type)
}

// optional uint64 node_id = 3;
inline bool ConfChange::_internal_has_node_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConfChange::has_node_id() const {
  return _internal_has_node_id();
}
inline void ConfChange::clear_node_id() {
  node_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfChange::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfChange::node_id() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChange.node_id)
  return _internal_node_id();
}
inline void ConfChange::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  node_id_ = value;
}
inline void ConfChange::set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:raftpb.ConfChange.node_id)
}

// optional bytes context = 4;
inline bool ConfChange::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfChange::has_context() const {
  return _internal_has_context();
}
inline void ConfChange::clear_context() {
  context_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfChange::context() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChange.context)
  return _internal_context();
}
inline void ConfChange::set_context(const std::string& value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:raftpb.ConfChange.context)
}
inline std::string* ConfChange::mutable_context() {
  // @@protoc_insertion_point(field_mutable:raftpb.ConfChange.context)
  return _internal_mutable_context();
}
inline const std::string& ConfChange::_internal_context() const {
  return context_.Get();
}
inline void ConfChange::_internal_set_context(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfChange::set_context(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftpb.ConfChange.context)
}
inline void ConfChange::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raftpb.ConfChange.context)
}
inline void ConfChange::set_context(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftpb.ConfChange.context)
}
inline std::string* ConfChange::_internal_mutable_context() {
  _has_bits_[0] |= 0x00000001u;
  return context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfChange::release_context() {
  // @@protoc_insertion_point(field_release:raftpb.ConfChange.context)
  if (!_internal_has_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return context_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfChange::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftpb.ConfChange.context)
}

// optional uint64 id = 1;
inline bool ConfChange::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfChange::has_id() const {
  return _internal_has_id();
}
inline void ConfChange::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfChange::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfChange::id() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChange.id)
  return _internal_id();
}
inline void ConfChange::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void ConfChange::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:raftpb.ConfChange.id)
}

// -------------------------------------------------------------------

// ConfChangeSingle

// optional .raftpb.ConfChangeType type = 1;
inline bool ConfChangeSingle::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfChangeSingle::has_type() const {
  return _internal_has_type();
}
inline void ConfChangeSingle::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::raftpb::ConfChangeType ConfChangeSingle::_internal_type() const {
  return static_cast< ::raftpb::ConfChangeType >(type_);
}
inline ::raftpb::ConfChangeType ConfChangeSingle::type() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChangeSingle.type)
  return _internal_type();
}
inline void ConfChangeSingle::_internal_set_type(::raftpb::ConfChangeType value) {
  assert(::raftpb::ConfChangeType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void ConfChangeSingle::set_type(::raftpb::ConfChangeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:raftpb.ConfChangeSingle.type)
}

// optional uint64 node_id = 2;
inline bool ConfChangeSingle::_internal_has_node_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfChangeSingle::has_node_id() const {
  return _internal_has_node_id();
}
inline void ConfChangeSingle::clear_node_id() {
  node_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfChangeSingle::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfChangeSingle::node_id() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChangeSingle.node_id)
  return _internal_node_id();
}
inline void ConfChangeSingle::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  node_id_ = value;
}
inline void ConfChangeSingle::set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:raftpb.ConfChangeSingle.node_id)
}

// -------------------------------------------------------------------

// ConfChangeV2

// optional .raftpb.ConfChangeTransition transition = 1;
inline bool ConfChangeV2::_internal_has_transition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfChangeV2::has_transition() const {
  return _internal_has_transition();
}
inline void ConfChangeV2::clear_transition() {
  transition_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::raftpb::ConfChangeTransition ConfChangeV2::_internal_transition() const {
  return static_cast< ::raftpb::ConfChangeTransition >(transition_);
}
inline ::raftpb::ConfChangeTransition ConfChangeV2::transition() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChangeV2.transition)
  return _internal_transition();
}
inline void ConfChangeV2::_internal_set_transition(::raftpb::ConfChangeTransition value) {
  assert(::raftpb::ConfChangeTransition_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  transition_ = value;
}
inline void ConfChangeV2::set_transition(::raftpb::ConfChangeTransition value) {
  _internal_set_transition(value);
  // @@protoc_insertion_point(field_set:raftpb.ConfChangeV2.transition)
}

// repeated .raftpb.ConfChangeSingle changes = 2;
inline int ConfChangeV2::_internal_changes_size() const {
  return changes_.size();
}
inline int ConfChangeV2::changes_size() const {
  return _internal_changes_size();
}
inline void ConfChangeV2::clear_changes() {
  changes_.Clear();
}
inline ::raftpb::ConfChangeSingle* ConfChangeV2::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:raftpb.ConfChangeV2.changes)
  return changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::ConfChangeSingle >*
ConfChangeV2::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.ConfChangeV2.changes)
  return &changes_;
}
inline const ::raftpb::ConfChangeSingle& ConfChangeV2::_internal_changes(int index) const {
  return changes_.Get(index);
}
inline const ::raftpb::ConfChangeSingle& ConfChangeV2::changes(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChangeV2.changes)
  return _internal_changes(index);
}
inline ::raftpb::ConfChangeSingle* ConfChangeV2::_internal_add_changes() {
  return changes_.Add();
}
inline ::raftpb::ConfChangeSingle* ConfChangeV2::add_changes() {
  // @@protoc_insertion_point(field_add:raftpb.ConfChangeV2.changes)
  return _internal_add_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::ConfChangeSingle >&
ConfChangeV2::changes() const {
  // @@protoc_insertion_point(field_list:raftpb.ConfChangeV2.changes)
  return changes_;
}

// optional bytes context = 3;
inline bool ConfChangeV2::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfChangeV2::has_context() const {
  return _internal_has_context();
}
inline void ConfChangeV2::clear_context() {
  context_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfChangeV2::context() const {
  // @@protoc_insertion_point(field_get:raftpb.ConfChangeV2.context)
  return _internal_context();
}
inline void ConfChangeV2::set_context(const std::string& value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:raftpb.ConfChangeV2.context)
}
inline std::string* ConfChangeV2::mutable_context() {
  // @@protoc_insertion_point(field_mutable:raftpb.ConfChangeV2.context)
  return _internal_mutable_context();
}
inline const std::string& ConfChangeV2::_internal_context() const {
  return context_.Get();
}
inline void ConfChangeV2::_internal_set_context(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfChangeV2::set_context(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftpb.ConfChangeV2.context)
}
inline void ConfChangeV2::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raftpb.ConfChangeV2.context)
}
inline void ConfChangeV2::set_context(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftpb.ConfChangeV2.context)
}
inline std::string* ConfChangeV2::_internal_mutable_context() {
  _has_bits_[0] |= 0x00000001u;
  return context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfChangeV2::release_context() {
  // @@protoc_insertion_point(field_release:raftpb.ConfChangeV2.context)
  if (!_internal_has_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return context_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfChangeV2::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftpb.ConfChangeV2.context)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raftpb::EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::EntryType>() {
  return ::raftpb::EntryType_descriptor();
}
template <> struct is_proto_enum< ::raftpb::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::MessageType>() {
  return ::raftpb::MessageType_descriptor();
}
template <> struct is_proto_enum< ::raftpb::ConfChangeTransition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::ConfChangeTransition>() {
  return ::raftpb::ConfChangeTransition_descriptor();
}
template <> struct is_proto_enum< ::raftpb::ConfChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::ConfChangeType>() {
  return ::raftpb::ConfChangeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_craft_2fraft_2eproto
